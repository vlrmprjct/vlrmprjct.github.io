# Simple workflow for deploying React app to GitHub Pages
name: Deploy App to GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  deployments: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Set up GitHub CLI
        run: gh auth login --with-token < ${{ secrets.GITHUB_TOKEN }}

      - name: Debug GitHub CLI
        run: gh auth status

      - name: Verify Release Creation
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release list

      - name: Get latest tag
        id: get_latest_tag
        run: |
          TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "")
          echo "LATEST_TAG=$TAG" >> $GITHUB_ENV
          echo "$TAG"

      - name: Install dependencies
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm ci --registry=https://registry.npmjs.org/ --//registry.npmjs.org/:_authToken=$NPM_TOKEN

      - name: Build App
        env:
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: npm run build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'dist'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Create release if not exists
        id: check_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if gh release view ${{ env.LATEST_TAG }}; then
            echo "Release exists"
          else
            echo "Release does not exist"
            gh release create ${{ env.LATEST_TAG }} --title "${{ env.LATEST_TAG }}" --notes "${{ env.LATEST_TAG }}"
          fi
